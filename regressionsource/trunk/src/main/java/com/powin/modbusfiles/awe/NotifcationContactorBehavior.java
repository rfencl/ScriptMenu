package com.powin.modbusfiles.awe;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Should the contactors open when this alarm or warning trigger.
 * @author powin
 *
 */
public class NotifcationContactorBehavior {
	 private static final boolean CONTACTORS_WILL_OPEN = true;
	private static final boolean CONTACTORS_REMAIN_CLOSED = false;
	public boolean CELL_HIGH_TEMPERATURE_ALARM=CONTACTORS_REMAIN_CLOSED;
	 public boolean CELL_HIGH_TEMPERATURE_DELTA_ALARM=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_HIGH_TEMPERATURE_DELTA_WARNING=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_HIGH_TEMPERATURE_WARNING=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_HIGH_TEMPERATURE_WARRANTY_ALARM=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_HIGH_TEMPERATURE_WARRANTY_WARNING_=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_HIGH_VOLTAGE_ALARM=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_HIGH_VOLTAGE_DELTA_ALARM=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_HIGH_VOLTAGE_DELTA_WARNING=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_HIGH_VOLTAGE_WARNING=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_LOW_TEMPERATURE_ALARM=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_LOW_TEMPERATURE_WARNING=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_LOW_TEMPERATURE_WARRANTY_ALARM=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_LOW_TEMPERATURE_WARRANTY_WARNING=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_LOW_VOLTAGE_ALARM=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CELL_LOW_VOLTAGE_WARNING=CONTACTORS_REMAIN_CLOSED ;
	 public boolean CONTACTOR_OPEN_ALARM=CONTACTORS_REMAIN_CLOSED ;
	 public boolean STRING_HIGH_VOLTAGE_ALARM=CONTACTORS_REMAIN_CLOSED ;
	 public boolean STRING_LOW_VOLTAGE_ALARM=CONTACTORS_REMAIN_CLOSED ;
	 public boolean STRING_OUT_OF_ROTATION_WARNING=CONTACTORS_REMAIN_CLOSED ;
	 
	 private final static Logger LOG = LogManager.getLogger(NotifcationContactorBehavior.class.getName());
	
	public NotifcationContactorBehavior get140() {
		  CELL_HIGH_TEMPERATURE_ALARM=CONTACTORS_WILL_OPEN;
		  CELL_HIGH_TEMPERATURE_DELTA_ALARM=CONTACTORS_WILL_OPEN ;
		  CELL_HIGH_TEMPERATURE_DELTA_WARNING=CONTACTORS_REMAIN_CLOSED ;
		  CELL_HIGH_TEMPERATURE_WARNING=CONTACTORS_REMAIN_CLOSED ;
		  CELL_HIGH_TEMPERATURE_WARRANTY_ALARM=CONTACTORS_REMAIN_CLOSED ;
		  CELL_HIGH_TEMPERATURE_WARRANTY_WARNING_=CONTACTORS_REMAIN_CLOSED ;
		  CELL_HIGH_VOLTAGE_ALARM=CONTACTORS_WILL_OPEN ;
		  CELL_HIGH_VOLTAGE_DELTA_ALARM=CONTACTORS_WILL_OPEN ;
		  CELL_HIGH_VOLTAGE_DELTA_WARNING=CONTACTORS_REMAIN_CLOSED ;
		  CELL_HIGH_VOLTAGE_WARNING=CONTACTORS_REMAIN_CLOSED ;
		  CELL_LOW_TEMPERATURE_ALARM=CONTACTORS_WILL_OPEN ;
		  CELL_LOW_TEMPERATURE_WARNING=CONTACTORS_REMAIN_CLOSED ;
		  CELL_LOW_TEMPERATURE_WARRANTY_ALARM=CONTACTORS_REMAIN_CLOSED ;
		  CELL_LOW_TEMPERATURE_WARRANTY_WARNING=CONTACTORS_REMAIN_CLOSED ;
		  CELL_LOW_VOLTAGE_ALARM=CONTACTORS_WILL_OPEN ;
		  CELL_LOW_VOLTAGE_WARNING=CONTACTORS_REMAIN_CLOSED ;
		  CONTACTOR_OPEN_ALARM=CONTACTORS_WILL_OPEN ;
		  STRING_HIGH_VOLTAGE_ALARM=CONTACTORS_WILL_OPEN ;
		  STRING_LOW_VOLTAGE_ALARM=CONTACTORS_WILL_OPEN ;
		  STRING_OUT_OF_ROTATION_WARNING=CONTACTORS_REMAIN_CLOSED ;	
		return this;	
	}
	
	public NotifcationContactorBehavior get225() {
	  CELL_HIGH_TEMPERATURE_ALARM=CONTACTORS_WILL_OPEN;
	  CELL_HIGH_TEMPERATURE_DELTA_ALARM=CONTACTORS_WILL_OPEN ;
	  CELL_HIGH_TEMPERATURE_DELTA_WARNING=CONTACTORS_REMAIN_CLOSED ;
	  CELL_HIGH_TEMPERATURE_WARNING=CONTACTORS_REMAIN_CLOSED ;
	  CELL_HIGH_TEMPERATURE_WARRANTY_ALARM=CONTACTORS_REMAIN_CLOSED ;
	  CELL_HIGH_TEMPERATURE_WARRANTY_WARNING_=CONTACTORS_REMAIN_CLOSED ;
	  CELL_HIGH_VOLTAGE_ALARM=CONTACTORS_WILL_OPEN ;
	  CELL_HIGH_VOLTAGE_DELTA_ALARM=CONTACTORS_REMAIN_CLOSED ;
	  CELL_HIGH_VOLTAGE_DELTA_WARNING=CONTACTORS_REMAIN_CLOSED ;
	  CELL_HIGH_VOLTAGE_WARNING=CONTACTORS_REMAIN_CLOSED ;
	  CELL_LOW_TEMPERATURE_ALARM=CONTACTORS_WILL_OPEN ;
	  CELL_LOW_TEMPERATURE_WARNING=CONTACTORS_REMAIN_CLOSED ;
	  CELL_LOW_TEMPERATURE_WARRANTY_ALARM=CONTACTORS_REMAIN_CLOSED ;
	  CELL_LOW_TEMPERATURE_WARRANTY_WARNING=CONTACTORS_REMAIN_CLOSED ;
	  CELL_LOW_VOLTAGE_ALARM=CONTACTORS_WILL_OPEN ;
	  CELL_LOW_VOLTAGE_WARNING=CONTACTORS_REMAIN_CLOSED ;
	  CONTACTOR_OPEN_ALARM=CONTACTORS_WILL_OPEN ;
	  STRING_HIGH_VOLTAGE_ALARM=CONTACTORS_WILL_OPEN ;
	  STRING_LOW_VOLTAGE_ALARM=CONTACTORS_WILL_OPEN ;
	  STRING_OUT_OF_ROTATION_WARNING=CONTACTORS_REMAIN_CLOSED ;	
	  return this;	
	}
	
	public boolean getBehavior(NotificationCodes code) {
		Field[] allFields = NotifcationContactorBehavior.class.getDeclaredFields();
		Field found = null;
	    List<Field> list = Arrays.stream(allFields)
	    					.filter(d -> (d.getName()).equals(code.name()))
	    					.collect(Collectors.toList());
	    found = list.isEmpty() ? found : list.get(0);
	    boolean opensContactor=CONTACTORS_REMAIN_CLOSED;
	    try {
			 opensContactor=Boolean.valueOf(found.get(this).toString());
		} catch (IllegalArgumentException | IllegalAccessException e) {
			LOG.error("Exception caught: ",e);
			throw new RuntimeException(e.getMessage());
		}
		return opensContactor;
	}

	public static void main(String[] args) throws IllegalArgumentException, IllegalAccessException {
		NotifcationContactorBehavior ncb = new NotifcationContactorBehavior();
		System.out.println(ncb.get225().getBehavior(NotificationCodes.CELL_HIGH_TEMPERATURE_ALARM));
	}
}
