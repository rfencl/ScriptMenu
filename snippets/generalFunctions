#!/bin/bash
[ ! ${GENERALFUNCTIONS_G} ] &&  GENERALFUNCTIONS_G='GENERALFUNCTIONS' ||  return 0

. /home/powin/tools/shconfig/menucfg
. /home/powin/tools/snippets/sharedVariables.sh 
. /home/powin/tools/snippets/cursor
. /home/powin/tools/snippets/color


# Menu title/Prompt
cntrPrompt () {
  local prompt="Choose an item: "      
  centerOn=$prompt  # global
  [[ $# -ne 0 ]]  && centerOn=$1 && printf "\n%*s" $[$COLS/2-${#centerOn}] ; echo -e "${BOLD}$1"
  printf "\n%*s" $[$COLS/2-${#centerOn}] ; echo -e "${BOLD}${prompt}"
}

# Aligns text that follows with the menu title/prompt      export TURTLE_VERSION

#--------------------------------------------------------------------------------------------
# center the text on the screen
#--------------------------------------------------------------------------------------------
cntr () {
  printf "%*s" $[$COLS/2-${#centerOn}] 
}


#--------------------------------------------------------------------------------------------
# Prompts the user to press any key to continue(sudo service tomcat status | grep running)
#--------------------------------------------------------------------------------------------
getKey () {
  [[ $1 -eq 1 ]] && read -n1 -p "Press any key to continue"
}

#--------------------------------------------------------------------------------------------
# pulls the value from the xml tag
# $1 is filename 
# $2 is the tag
#--------------------------------------------------------------------------------------------
extractXml () {
    local file="$1"
    local tag="$2"
    echo $(grep $tag $file | sed "s/<$tag>//" | sed "s/<\/$tag>//")
}

#--------------------------------------------------------------------------------------------
#  given an app and a major and minor version find the highest build number
#  if the major or minor number doesn't exist, return the latest build.
#--------------------------------------------------------------------------------------------
getHighestVersion () {
    local let major="$2"
    local let minor="$3"
    local latest=$(extractXml "tools/${1}-versions.xml" latest)
    if [[ "${latest}" == *"${major}.${minor}"* ]] ;
    then 
       echo $latest
    else
        (( minor++ ))
        local let lineNum=$(getLineNum "${major}.${minor}.0" "tools/${1}-versions.xml")
        lineNum=${lineNum##* }   
        if [ $lineNum ]
        then
           (( lineNum-- ))
            echo $(cat tools/${1}-versions.xml | sed -n "${lineNum}"p | sed "s/<version>//" | sed "s/<\/version>//")   
        else
            echo $latest
        fi
    fi
}

#---------------------------------------------------------------------------------------
# Reads the maven-metadata.xml for the app specified in $1
#--------------------------------------------------------------------------------------------
getAppVer () {
        checkArchivaCredentials
        if [[ "turtlekoboldcoblynauknockerprimrose" == *"$1"* ]] ;
        then
          cntr ; echo "getting latest for $1"
          wget -q --no-check-certificate --user="$archiva_user" --password "$archiva_password" \
          https://archiva.powindev.com/repository/internal/com/powin/"${1}"/maven-metadata.xml \
          -O tools/"${1}"-versions.xml
        else
          echo  "Invalid app name" 
          return 1 
        fi
}
#--------------------------------------------------------------------------------------------
#  Read the latest maven-metadata from Archiva for each app
#--------------------------------------------------------------------------------------------
updateAppVersions () {
    checkArchivaCredentials
    getAppVer turtle
    getAppVer kobold
    getAppVer coblynau
    getAppVer knocker
    getAppVer primrose
}

#--------------------------------------------------------------------------------------------
# returns the line number where find appears in file
#--------------------------------------------------------------------------------------------
getLineNum () {
  echo $(sudo grep -n "$1" "$2" | sed 's/:.*//')
}
#--------------------------------------------------------------------------------------------
# Prompts for login credentials and caches them in props file.
#--------------------------------------------------------------------------------------------
checkArchivaCredentials () {
  [[ -f $ARCHIVA_PROPS ]] &&  . "$ARCHIVA_PROPS"
  if [[ -z $archiva_user || -z $archiva_password ]];
  then
	  read -e -p "Enter your Archiva logon: " ARCHIVA_LOGON
	  read -e -s -p "Enter your Archiva password: " ARCHIVA_PASSWORD
          echo
          sudo touch "$ARCHIVA_PROPS"
          sudo chmod 755 "$ARCHIVA_PROPS"
          [[ -f $ARCHIVA_PROPS ]] || echo File not created!
          sudo echo "archiva_user=$ARCHIVA_LOGON" >> "$ARCHIVA_PROPS"
          sudo echo "archiva_password=$ARCHIVA_PASSWORD" >> "$ARCHIVA_PROPS"
  fi
}

checkSubversionCredentials () {
  [[ -f $ARCHIVA_PROPS ]] &&  . "$ARCHIVA_PROPS"
  echo $SVNUSER
  if [[ -z $SVNUSER || -z $SVNPASS ]];
  then
	  read -e -p "Enter your Subversion logon id: " SVN_LOGON
	  read -e -s -p "Enter your Subversion password: " SVN_PASSWORD
          echo
          sudo touch "$ARCHIVA_PROPS"
          sudo chmod 755 "$ARCHIVA_PROPS"
          [[ -f $ARCHIVA_PROPS ]] || echo File not created!
          sudo echo "SVNUSER=$SVN_LOGON" >> "$ARCHIVA_PROPS"
          sudo echo "SVNPASS=$SVN_PASSWORD" >> "$ARCHIVA_PROPS"
  fi
}

getAppVersions () {
  [[ -f $APP_VERSION_PROPS ]] &&  . "$APP_VERSION_PROPS"
}

trim () {
  echo "$(echo -e "${1}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
}

#--------------------------------------------------------------------------------------------
# Write the versions chosen to file.
#--------------------------------------------------------------------------------------------
writeAppVersions () {
          [[ -f $APP_VERSION_PROPS ]] || echo File not created!
          sudo echo "TURTLE_VERSION=$TURTLE_VERSION" > "$APP_VERSION_PROPS"
          sudo echo "KOBOLD_VERSION=$KOBOLD_VERSION" >> "$APP_VERSION_PROPS"
          sudo echo "KNOCKER_VERSION=$KNOCKER_VERSION" >> "$APP_VERSION_PROPS"
          sudo echo "COB_VERSION=$COB_VERSION" >> "$APP_VERSION_PROPS"
          sudo echo "PRIMROSE_VERSION=$PRIMROSE_VERSION" >> "$APP_VERSION_PROPS"
}

displayAppVersions () {
  cntr ; echo -en "${BOLD}${LTGREEN}turtle: ${RESET}"  ; trim "$1"
  cntr ; echo -en "${BOLD}${LTGREEN}kobold: ${RESET}"   ; trim "$2"
  cntr ; echo -en "${BOLD}${LTGREEN}coblynau: ${RESET}"  ; trim "$3"
  cntr ; echo -en "${BOLD}${LTGREEN}knocker: ${RESET}"  ; trim  "$4"
  cntr ; echo -en "${BOLD}${LTGREEN}primrose: ${RESET}"  ; trim  "$5"
}

#--------------------------------------------------------------------------------------------
# pulls the version from the latest tag for each app
#--------------------------------------------------------------------------------------------
readAppVersionsFromArchiva () {
      local major
     cntr ; read -e -i "latest" -p "Major Version: " major
     if [[ $major = "latest" ]] ;
     then
      TURTLE_VERSION=$(extractXml tools/turtle-versions.xml latest)
      cntr ; echo turtle: $TURTLE_VERSION
      KOBOLD_VERSION=$(extractXml tools/kobold-versions.xml latest)
      cntr ; echo kobold: $KOBOLD_VERSION
      COB_VERSION=$(extractXml tools/coblynau-versions.xml latest)
      cntr ; echo coblynau: $COB_VERSION
      KNOCKER_VERSION=$(extractXml tools/knocker-versions.xml latest)
      cntr ; echo knocker: $KNOCKER_VERSION
      PRIMROSE_VERSION=$(extractXml tools/primrose-versions.xml latest)
      cntr ; echo primrose: $PRIMROSE_VERSION
      else 
            cntr ; read -e -p "Minor Version : " minorstart
            TURTLE_VERSION=$(getHighestVersion turtle $major $minorstart)
            KOBOLD_VERSION=$(getHighestVersion kobold $major $minorstart)
            COB_VERSION=$(getHighestVersion coblynau $major $minorstart)
            KNOCKER_VERSION=$(getHighestVersion knocker $major $minorstart)
            PRIMROSE_VERSION=$(getHighestVersion primrose $major $minorstart)
            displayAppVersions $TURTLE_VERSION $KOBOLD_VERSION $COB_VERSION $KNOCKER_VERSION $PRIMROSE_VERSION
      fi
    writeAppVersions
}
#--------------------------------------------------------------------------------------------
#  Remove all files older than number of days passed.
#--------------------------------------------------------------------------------------------
removeOldFiles () {
  local path="$1"
  local let days="$2"
  find $path/* -type f -mtime +${days} -exec rm -f {} \;
}

#--------------------------------------------------------------------------------------------
#  Polls catalina.out until the startup message appears.
#--------------------------------------------------------------------------------------------
waitTomcatStart () {
  local status="nothing"
  #[[ -e $CATALINA_LOG_PATH/catalina.out ]] && status=$(sudo grep 'Catalina.start Server startup in' $CATALINA_LOG_PATH/catalina.out)
  cntr ;   echo -ne "${YELLOW}Starting Tomcat please wait" 
  while [[ $status != *"Catalina.start Server startup in"* ]]; 
  do 
    printSpinner
    sleep .3 
    [[ -e $CATALINA_LOG_PATH/catalina.out ]] && status=$(sudo grep 'Catalina.start Server startup in' $CATALINA_LOG_PATH/catalina.out)
  done
  echo
  cntr ; echo -e "${LTGREEN}Tomcat started${RESET}"
}

#--------------------------------------------------------------------------------------------
#  Polls catalina.out for stopped message.
#--------------------------------------------------------------------------------------------
waitTomcatStop () {
  while [[ $(/bin/systemctl status tomcat.service | grep 'Stopped Tomcat')  != *"Stopped Tomcat"* ]]; 
  do 
    printSpinner
    sleep .3
  done
  cntr ; echo -e "${LTGREEN}Tomcat stopped${RESET}"
}

let spinCounter=0
spinChars='|/-\|/-\'
#--------------------------------------------------------------------------------------------
# Wait Spinner
#--------------------------------------------------------------------------------------------
printSpinner () {
   echo -ne "$BOLD" ; echo -ne "${spinChars:(( spinCounter++ )):1}"
   (( spinCounter=spinCounter%8 ))
   echo -en $(moveCursorBackward 1)
}
#--------------------------------------------------------------------------------------------
# generate a menu
#
# Example Usage: 
# arr1=('Edit File' 'View Logs' 'Manage Tomcat'  'Flush redis' 'Toggle Stack Simulator \(currently: $stackSimON\)' 'List Dirs' 'Manage App Versions')
# arr2=("(doEditFile)" "(doViewLogs)" "(doManageTomcat)" "(flushRedis);curDwn=1" "enableStackSim;curDwn=1" "(doListDirs);curDwn=1" "(doManageAppVersions)")
# genMenu "Main Menu" "${arr1[@]}" "${arr2[@]}"
#
# Note:
#    Wrapping methods in () will execute that method in a subshell, this is required so exit returns to the previous menu
#     in the case of nested menus.
#    ;curDwn=1 appended to the method call will force a keypress to continue prompt
#--------------------------------------------------------------------------------------------
genMenu () {
    title="$1" ; shift
    outfile="/home/powin/tools/modules/.${title// /_}".sh
    if [ -e $outfile ]; then . "$outfile"; return; fi
    arr=("$@")
    numItems=${#arr[@]}
    #echo "${title// /_}" '() {' > "$outfile"
    echo 'while true' > "$outfile"
    echo 'do'         >> "$outfile"
    echo  'let itemCnt=0' >> "$outfile"
    echo 'clear' >> "$outfile"
    echo 'cntrPrompt "$title"' >> "$outfile"
    echo 'cntr ; echo -e ' '"${RED}${itemCnt}: Exit";   ((itemCnt++))'  >> "$outfile"
    for (( i=0; i < $numItems/2; i=i+1 )); 
       do
           echo 'cntr ; echo -e "${LTCYAN}${itemCnt}:"' "${arr[i]}"'; ((itemCnt++))' >> "$outfile"
       done
  echo 'read -sn1' >> "$outfile"
  echo 'let labelCnt=0' >> "$outfile"
  echo 'let curDwn=$((itemCnt+1))' >> "$outfile"
  echo 'case "$REPLY" in' >> "$outfile"
  echo '$((labelCnt++))) clear; exit 0;;' >> "$outfile"
    for (( i=$numItems/2; i < $numItems; i=i+1 )); 
       do
           echo '$((labelCnt++))) '"${arr[i]}"';;'  >> "$outfile"
       done
       echo ' *) curDwn=1 ;;' >> "$outfile"
  echo 'esac' >> "$outfile"
  echo 'moveCursorDown $curDwn ; cntr ; getKey $curDwn' >> "$outfile"
  echo 'done' >> "$outfile"
  #echo '}' >> $outfile
  . "$outfile"
  chmod 555 "$outfile"
}

